package nth.meyn.cx.sysmac.converter.sysmac.clipboard;

import java.util.Set;

import javax.xml.bind.DatatypeConverter;

import org.apache.commons.lang3.StringUtils;

import nth.meyn.cx.sysmac.converter.cx.ladder.model.CxVariable;
import nth.meyn.cx.sysmac.converter.sysmac.ladder.xml.factory.IdFactory;
import nth.meyn.cx.sysmac.converter.util.StringToArrayCodeUtil;

public class SysmacSymbolDataFactory {

	private static final int BYTE_MAX = 256;
	private static final String INITITAL_VALUE = "";
	private static final String LINK_TO_IO = "";
	private static final String RETAIN = Boolean.FALSE.toString().toUpperCase();
	private static final String CONSTANT = Boolean.FALSE.toString().toUpperCase();

	/**
	 * Created with {@link #getLadderData()} and then
	 * {@link StringToArrayCodeUtil#print(String)}<br>
	 * First copy Ladder program in Sysmac, than: <br>
	 * {@code String sysmacSymbolData=SysmacClipboard.getSymbolData();}<br>
	 * {@code String byteArrayCode = StringToArrayCodeUtil.print(sysmacSymbolData);}<br>
	 * {@code System.out.println(byteArrayCode);}
	 * 
	 * @return string for clipboard
	 */
	public static String createExample() {
		byte[] array = DatatypeConverter.parseHexBinary(
				
		String symbolData = new String(array);
		return symbolData;
	}

	public static String createSysmacClipboardData(Set<CxVariable> cxVariables) {
		StringBuilder data = new StringBuilder();
		String variableLines = createVariableLines(cxVariables);
		data.append(createPrefix(variableLines));
		data.append(variableLines);
		data.append(createPostFix());

		return data.toString();
	}

	private static String createVariableLines(Set<CxVariable> cxVariables) {
		StringBuilder data=new StringBuilder();
		IdFactory idFactory=new IdFactory();
		for (CxVariable cxVariable : cxVariables) {
			data.append(createVariableLine(cxVariable, idFactory));
		}
		return data.toString();
	}

	private static int getVariableLength(String data) {
		int startPos=data.indexOf("+GN=VAR	GVT=DefaultGroup");
		int endPos=data.indexOf("+GN=VAR_EXTERNAL	GA=External	GVT=ExternalGroup");
		int l=endPos-startPos;
		return l;
	}

	// ++D=BOOL N=iTest1 ID=07c93356-3dd8-4e3b-896f-478800000009 G=VAR Com=Input
	// variable 1
	private static String createVariableLine(CxVariable cxVariable, IdFactory idFactory) {
		StringBuilder data = new StringBuilder();
		data.append("++D=");
		data.append(cxVariable.getDataType().toString());
		data.append("\tN=");
		data.append(cxVariable.getName());
		data.append("\tID=");
		data.append(idFactory.createNextVariableId());
		data.append("\tG=VAR");
		if (StringUtils.isNotEmpty(cxVariable.getComment())) {
			data.append("\tCom=");
			data.append(cxVariable.getComment());
		}	
		data.append("\r\n");
		return data.toString();
	}

	private static String createPostFix() {
		// String s = createExample();
		// System.out.println(s);
		// String prefix=s.substring(s.indexOf("+GN=VAR_EXTERNAL"));
		// System.out.println(prefix);
		// System.out.println(StringToArrayCodeUtil.print(prefix));
		byte[] postFix = DatatypeConverter.parseHexBinary(
				
		return new String(postFix);
	}

	private static String createPrefix(String variableLines) {
		// String s = createExample();
		// System.out.println(s);
		//
		// String prefix=s.substring(0,s.indexOf("+GN=VAR
		// GVT=DefaultGroup")+"+GN=VAR GVT=DefaultGroup".length());
		//
		// System.out.println(prefix);
		//
		// System.out.println(StringToArrayCodeUtil.print(prefix));
		byte[] prefix = DatatypeConverter.parseHexBinary(
				
		
		setVariableLinesLength(variableLines, prefix);

		prefix[1060]=51;//TODO why???
		
		String prefixString= new String(prefix);
		prefixString = changePos612To65533(prefixString);//TODO why???
		return prefixString;		
	}

	private static void setVariableLinesLength(String variableLines, byte[] prefix) {
		int length = variableLines.length()+109;
		prefix[926]=(byte) (length % BYTE_MAX);
		prefix[927]=(byte) (length/BYTE_MAX);
	}

	private static String changePos612To65533(String prefixString) {
		prefixString=prefixString.substring(0,612)+'\uFFFD'+prefixString.substring(613);
		return prefixString;
	}

	public static String createAsTextTable(Set<CxVariable> cxVariables) {
		StringBuilder data = new StringBuilder();
		for (CxVariable cxVariable : cxVariables) {
			data.append(createVariableTableRow(cxVariable));
		}
		return data.toString();
	}

	private static String createVariableTableRow(CxVariable cxVariable) {
		StringBuilder data = new StringBuilder();
		data.append(cxVariable.getName());
		data.append("\t");
		data.append(cxVariable.getDataType().toString());
		data.append("\t");
		data.append(INITITAL_VALUE);
		data.append("\t");
		data.append(LINK_TO_IO);
		data.append("\t");
		data.append(RETAIN);
		data.append("\t");
		data.append(CONSTANT);
		data.append("\t");
		data.append(cxVariable.getComment()==null?"":cxVariable.getComment());
		data.append("\r\n");
		return data.toString();
	}
	
	
}
